import sys
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QApplication
from widgets.image_tab import ImageTab
from widgets.autogenerated.testbench_ui import Ui_TestBench
import json
import os


class TestBench(QMainWindow, Ui_TestBench):
    """
    The class representing the main window of the application.
    """
    version = 0.1 #: Program version
    file_settings_name = "TestBench.prefs"
    current_dir = ""
    tabs = {}
    settings = {}

    def __init__(self):
        """
        The class constructor.
        """
        QMainWindow.__init__(self)
        Ui_TestBench.__init__(self)
        self.setupUi(self)
        self.statusbar.showMessage(
            "TestBench v{} - INSA Toulouse".format(self.version)
            )
        self.tabsWidget.removeTab(0)

        # Load Preferences
        self.load_settings()

        # Set close action
        self.action_Quit.triggered.connect(self.close)

        # Set open action
        self.action_Open.triggered.connect(self.open)

        # Set save action
        self.action_Save.triggered.connect(self.open)

        # Specify cose action for tabsWidget

        self.tabsWidget.tabCloseRequested.connect(self.removeTab)

    def removeTab(self, tab_index):
        """Removes a tab from the central QTabWidget.

        Args:
            tab_index (int): the index of the tab to be removed
        """
        self.tabsWidget.removeTab(tab_index)

    def message(self, text):
        """Writes a message to the lower QPlainTextEdit message area.

        Args:
            text (str): the text of the message to be written
        """
        self.messagesWidget.appendPlainText(text)

    def load_settings(self):
        """Loads the TestBench.prefs file and puts
        its content in the settings attribute. 
        The preference file must be located in the same
        dir as the TestBench executable.
        JSON format is used.
        """
        if os.path.exists(self.file_settings_name):
            f = open(self.file_settings_name, 'r')
            self.settings = json.load(f)
            f.close()

    def save_preferences(self):
        """Saves the content of the settings attribute
        in the TestBench.prefs file, located in the same
        dir as the TestBench executable.
        """
        f = open(self.file_settings_name, 'w')
        json.dump(self.settings, f)
        f.close()

    def open(self):
        """Opens an image file and shows it as a new tab
        in the central QTabsWidget
        """
        fd = QFileDialog(self)
        fd.setNameFilter("Tiff Images (*.tiff *.tif *.png)")
        fd.setFileMode(fd.ExistingFile)
        if self.settings is not None:
            last_dir = self.settings.get("last_dir", None)
            if last_dir is not None:
                fd.setDirectory(last_dir)
        else:
            self.settings = {}
        if fd.exec():
            f = fd.selectedFiles()[0]
            self.settings['last_dir'] = os.path.dirname(f)
            self.save_preferences()
        itab = ImageTab(self)
        itab.message.connect(self.message)
        self.tabsWidget.addTab(itab, os.path.basename(f))
        self.tabsWidget.setCurrentIndex(self.tabsWidget.indexOf(itab))
        itab.open(f)

    def save(self):
        pass


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = TestBench()
    window.showMaximized()
    sys.exit(app.exec_())
